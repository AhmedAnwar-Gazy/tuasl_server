package orgs.models2;

import orgs.utils.DatabaseConnection;

import java.sql.*;

public class Session {
    private Long id; // Maps to 'id' INT AUTO_INCREMENT PRIMARY KEY in MySQL
    private Long userId;
    private String deviceToken; // Maps to 'device_token' VARCHAR(255)
    // Removed: private String ipAddress; // Not in MySQL sessions table
    private boolean isActive; // Maps to 'is_active' BOOLEAN
    private Timestamp lastActiveAt; // Managed by DB default and ON UPDATE CURRENT_TIMESTAMP
    private Timestamp createdAt;    // Managed by DB default
    // Removed: private Timestamp expiresAt; // Not in MySQL sessions table

    // Constructor for fetching/identifying by ID
    public Session(Long id) {
        this.id = id;
    }

    // Full constructor for creating/retrieving, matching the MySQL schema
    public Session(Long id, Long userId, String deviceToken, boolean isActive, Timestamp lastActiveAt, Timestamp createdAt) {
        this.id = id;
        this.userId = userId;
        this.deviceToken = deviceToken;
        this.isActive = isActive;
        this.lastActiveAt = lastActiveAt;
        this.createdAt = createdAt;
    }

    // Constructor for a new session (ID will be auto-generated by DB)
    public Session(Long userId, String deviceToken, boolean isActive) {
        this.userId = userId;
        this.deviceToken = deviceToken;
        this.isActive = isActive;
        // createdAt and lastActiveAt are handled by DB defaults
    }


    // --- Getters and Setters ---
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public Long getUserId() { return userId; }
    public void setUserId(Long userId) { this.userId = userId; }

    public String getDeviceToken() { return deviceToken; } // Renamed from getDeviceInfo
    public void setDeviceToken(String deviceToken) { this.deviceToken = deviceToken; } // Renamed from setDeviceInfo

    public boolean isActive() { return isActive; }
    public void setActive(boolean active) { isActive = active; }

    public Timestamp getLastActiveAt() { return lastActiveAt; }
    public void setLastActiveAt(Timestamp lastActiveAt) { this.lastActiveAt = lastActiveAt; }

    public Timestamp getCreatedAt() { return createdAt; }
    public void setCreatedAt(Timestamp createdAt) { this.createdAt = createdAt; }

    // Removed Getters/Setters for ipAddress and expiresAt as they are not in DB schema

    // --- Database Operations ---

    /**
     * Saves a new session record to the database.
     * The `id`, `created_at`, and `last_active_at` are handled by the database's auto-increment and defaults.
     *
     * @return true if the session was successfully inserted, false otherwise.
     * @throws SQLException if a database access error occurs.
     */
    public boolean save() throws SQLException {
        // SQL matching MySQL 'sessions' table columns
        String sql = "INSERT INTO sessions (user_id, device_token, is_active) VALUES (?, ?, ?)";

        try (Connection connection = DatabaseConnection.getConnection();
             PreparedStatement statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

            statement.setLong(1, userId);
            statement.setString(2, deviceToken);
            statement.setBoolean(3, isActive); // Use setBoolean for MySQL BOOLEAN type

            boolean isInserted = statement.executeUpdate() > 0;
            if (isInserted) {
                try (ResultSet generatedKeys = statement.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        this.id = generatedKeys.getLong(1); // Set the auto-generated ID
                    }
                }
            }
            return isInserted;
        }
    }

    /**
     * Updates an existing session record in the database.
     * The `last_active_at` timestamp is automatically updated by the database.
     *
     * @return true if the session was successfully updated, false otherwise.
     * @throws SQLException if a database access error occurs.
     */
    public boolean update() throws SQLException {
        // SQL matching MySQL 'sessions' table columns, using 'id' for WHERE clause
        String sql = "UPDATE sessions SET user_id = ?, device_token = ?, is_active = ? WHERE id = ?";

        try (Connection connection = DatabaseConnection.getConnection();
             PreparedStatement statement = connection.prepareStatement(sql)) {

            statement.setLong(1, userId);
            statement.setString(2, deviceToken);
            statement.setBoolean(3, isActive);
            statement.setLong(4, id); // Use 'id' for the WHERE clause

            return statement.executeUpdate() > 0;
        }
    }

    /**
     * Deletes a session record from the database by its ID.
     *
     * @return true if the session was successfully deleted, false otherwise.
     * @throws SQLException if a database access error occurs.
     */
    public boolean delete() throws SQLException {
        String sql = "DELETE FROM sessions WHERE id = ?"; // Use 'id' for WHERE clause
        try (Connection connection = DatabaseConnection.getConnection();
             PreparedStatement statement = connection.prepareStatement(sql)) {

            statement.setLong(1, id);
            return statement.executeUpdate() > 0;
        }
    }

    /**
     * Refreshes the `last_active_at` timestamp for a session in the database.
     * Note: MySQL's `ON UPDATE CURRENT_TIMESTAMP` would also update this when any other column is modified.
     *
     * @return true if the record was updated, false otherwise.
     * @throws SQLException if a database access error occurs.
     */
    public boolean refreshLastActive() throws SQLException {
        String sql = "UPDATE sessions SET last_active_at = CURRENT_TIMESTAMP WHERE id = ?";
        try (Connection connection = DatabaseConnection.getConnection();
             PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setLong(1, id);
            return statement.executeUpdate() > 0;
        }
    }

    // --- Retrieval Methods ---

    /**
     * Retrieves a session by its unique ID.
     *
     * @param sessionId The ID of the session.
     * @return A Session object if found, null otherwise.
     * @throws SQLException if a database access error occurs.
     */
    public static Session findById(Long sessionId) throws SQLException {
        String sql = "SELECT id, user_id, device_token, is_active, last_active_at, created_at " +
                "FROM sessions WHERE id = ?";
        return executeQueryAndBuildSession(sql, sessionId);
    }

    /**
     * Retrieves a session by user ID and device token (unique constraint).
     *
     * @param userId The ID of the user associated with the session.
     * @param deviceToken The device token of the session.
     * @return A Session object if found, null otherwise.
     * @throws SQLException if a database access error occurs.
     */
    public static Session findByUserIdAndDeviceToken(Long userId, String deviceToken) throws SQLException {
        String sql = "SELECT id, user_id, device_token, is_active, last_active_at, created_at " +
                "FROM sessions WHERE user_id = ? AND device_token = ?";
        // Use a helper method that accepts multiple parameters
        return executeQueryAndBuildSession(sql, userId, deviceToken);
    }

    /**
     * Helper method to execute a query and build a Session object from the ResultSet.
     *
     * @param sql The SQL query to execute.
     * @param params The parameters for the PreparedStatement.
     * @return A Session object or null.
     * @throws SQLException if a database access error occurs.
     */
    private static Session executeQueryAndBuildSession(String sql, Object... params) throws SQLException {
        try (Connection connection = DatabaseConnection.getConnection();
             PreparedStatement statement = connection.prepareStatement(sql)) {

            for (int i = 0; i < params.length; i++) {
                if (params[i] instanceof Long) {
                    statement.setLong(i + 1, (Long) params[i]);
                } else if (params[i] instanceof String) {
                    statement.setString(i + 1, (String) params[i]);
                } else if (params[i] instanceof Boolean) {
                    statement.setBoolean(i + 1, (Boolean) params[i]);
                }
                // Add other types if necessary
            }

            try (ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    return new Session(
                            resultSet.getLong("id"),
                            resultSet.getLong("user_id"),
                            resultSet.getString("device_token"),
                            resultSet.getBoolean("is_active"),
                            resultSet.getTimestamp("last_active_at"),
                            resultSet.getTimestamp("created_at")
                    );
                }
            }
        }
        return null;
    }
}